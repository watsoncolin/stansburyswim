@page
@model FillThePool.Core.Areas.Admin.Pages.Manage.PrintModel
@{
	Layout = "_Layout.cshtml";
	ViewData["Title"] = "Manage Schedule";
	ViewData["ActivePage"] = FillThePool.Core.Areas.Admin.Pages.Manage.AdminNavPages.Schedules;
}

<div class="container">
	<div class="row">
		<div class="col">
			<h1 class="display-4 text-center">Print Schedule</h1>
			<br />
		</div>
	</div>
	<div class="row">
		<div class="col">
			<form method="post">
				<div class="form-row">
					<div class="col">
						<input class="form-control" type="date" asp-for="InputModel.Date" />
					</div>
					<div class="col">
						<input type="submit" value="Go" class="btn btn-primary" asp-page-handler="ChangeDate" />
						<button class="btn btn-primary" id="print-btn">Print</button>
					</div>
				</div>
				<div class="form-row">
					<div class="form-check form-check-inline">
						@for (var i = 0; i < Model.InputModel.PoolChoices.Count; i++)
						{
							<input class="form-check-input" asp-for="InputModel.PoolChoices[i].Selected" />
							<input type="hidden" asp-for="InputModel.PoolChoices[i].Pool" />
							<label class="form-check-label">@Model.InputModel.PoolChoices[i].Pool</label>
							<span>&nbsp;</span>
						}
					</div>
				</div>
				<div class="form-row">
					<div class="form-check form-check-inline">
						@for (var i = 0; i < Model.InputModel.InstructorChoices.Count; i++)
						{
							<input class="form-check-input" asp-for="InputModel.InstructorChoices[i].Selected" />
							<input type="hidden" asp-for="InputModel.InstructorChoices[i].Instructor" />
							<label class="form-check-label">@Model.InputModel.InstructorChoices[i].Instructor</label>
							<span>&nbsp;</span>
						}
					</div>
				</div>
				<div class="form-row">
					<div class="form-check form-check-inline">
						<input class="form-check-input" asp-for="InputModel.Details" />
						<input type="hidden" asp-for="InputModel.Details" />
						<label class="form-check-label">Show Notes</label>
						<span>&nbsp;</span>
					</div>
				</div>
			</form>
		</div>
	</div>
	<br />
	<br />
	<div class="row">
		<div class="col">
			<style>
				td {
					border: solid 1px #dee2e6;
				}
			</style>
			@{
				var pools = Model.Schedules.Select(s => s.Pool.Name).Distinct();
			}
			@foreach (var pool in pools)
			{
				var schedules = Model.Schedules.Where(s => s.Pool.Name == pool);
				var instructors = schedules.Select(y => y.Instructor.Name).Distinct().OrderBy(i => i);
				<h5>@pool</h5>
				<table class="table">
					<thead>
						<tr>
							<th>
								Time
							</th>
							@foreach (var instructor in instructors)
							{
								<th>
									@instructor
								</th>
							}
						</tr>
					</thead>
					<tbody>
						@{
							var dates = schedules.GroupBy(s => s.Start).ToList();
						}
						@for (var i = 0; i < dates.Count(); i++)
						{
							var date = dates[i];
							<tr>
								<td rowspan="1">
									@date.Key.ToShortTimeString()
								</td>
								@foreach (var instructor in instructors)
								{
									var schedule = date.FirstOrDefault(s => s.Instructor.Name == instructor);
									if (schedule != null && schedule.Registration != null)
									{
										bool renderCell = true;
										if (i > 0)
										{
											var previousRow = dates[i - 1].FirstOrDefault(s => s.Instructor.Name == instructor);
											if (previousRow != null)
											{
												if (previousRow.Registration != null && previousRow.Registration.Student.Id == schedule.Registration.Student.Id)
												{
													renderCell = false;
												}
											}
										}
										@if (renderCell)
										{
											var rowSpan = 1;
											if (i + rowSpan < dates.Count())
											{
												var nextRow = dates[i + rowSpan].FirstOrDefault(s => s.Instructor.Name == instructor);
												while (nextRow != null && nextRow.Registration != null && nextRow.Registration.Student.Id == schedule.Registration.Student.Id)
												{
													rowSpan++;
													nextRow = dates[i + rowSpan].FirstOrDefault(s => s.Instructor.Name == instructor);
												}
											}

											<td rowspan="@rowSpan">
												<div>
													@schedule.Registration.Student.Name
												</div>
												@if (Model.InputModel.Details)
												{
													<div>
														<small>@(DateTime.Now.Year - schedule.Registration.Student.Birthday.Year)</small>
													</div>
													<div>
														<small>@schedule.Registration.Student.Ability</small>
													</div>
													<div>
														<small>@schedule.Registration.Student.Notes</small>
													</div>
												}
											</td>
										}
									}
									else if (schedule != null && schedule.Registration == null)
									{
										<td rowspan="1">
											<small>Available</small>
										</td>
									}
									else if (schedule == null)
									{
										<td rowspan="1">
											<small>Not scheduled</small>
										</td>
									}
								}
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
	</div>
</div>

@section Print {
	<div class="row">
		<div class="col">
			Date: @Model.InputModel.Date.ToShortDateString()
		</div>
		@if (Model.InputModel.PoolChoices.Any(i => i.Selected))
		{
			<div class="col">
				Pool:
				@foreach (var pool in Model.InputModel.PoolChoices.Where(p => p.Selected))
				{
					<span>@pool.Pool</span>
				}
			</div>
		}
		@if (Model.InputModel.InstructorChoices.Any(i => i.Selected))
		{
			<div class="col">
				Instructor:
				@foreach (var instructor in Model.InputModel.InstructorChoices.Where(p => p.Selected))
				{
					<span>@instructor.Instructor</span>
				}
			</div>
		}
	</div>
	<br />
	<br />
	<br />
	@foreach (var pool in pools)
	{
		var schedules = Model.Schedules.Where(s => s.Pool.Name == pool);
		var instructors = schedules.Select(y => y.Instructor.Name).Distinct().OrderBy(i => i);
		<h5>@pool</h5>
		<table class="table">
			<thead>
				<tr>
					<th>
						Time
					</th>
					@foreach (var instructor in instructors)
					{
						<th>
							@instructor
						</th>
					}
				</tr>
			</thead>
			<tbody>
				@{
					var dates = schedules.GroupBy(s => s.Start).ToList();
				}
				@for (var i = 0; i < dates.Count(); i++)
				{
					var date = dates[i];
					<tr>
						<td rowspan="1">
							@date.Key.ToShortTimeString()
						</td>
						@foreach (var instructor in instructors)
						{
							var schedule = date.FirstOrDefault(s => s.Instructor.Name == instructor);
							if (schedule != null && schedule.Registration != null)
							{
								bool renderCell = true;
								if (i > 0)
								{
									var previousRow = dates[i - 1].FirstOrDefault(s => s.Instructor.Name == instructor);
									if (previousRow != null)
									{
										if (previousRow.Registration != null && previousRow.Registration.Student.Id == schedule.Registration.Student.Id)
										{
											renderCell = false;
										}
									}
								}
								@if (renderCell)
								{
									var rowSpan = 1;
									if (i + rowSpan < dates.Count())
									{
										var nextRow = dates[i + rowSpan].FirstOrDefault(s => s.Instructor.Name == instructor);
										while (nextRow != null && nextRow.Registration != null && nextRow.Registration.Student.Id == schedule.Registration.Student.Id)
										{
											rowSpan++;
											nextRow = dates[i + rowSpan].FirstOrDefault(s => s.Instructor.Name == instructor);
										}
									}

									<td rowspan="@rowSpan">
										<div>
											@schedule.Registration.Student.Name
										</div>
										@if (Model.InputModel.Details)
										{
											<div>
												<small>@(DateTime.Now.Year - schedule.Registration.Student.Birthday.Year)</small>
											</div>
											<div>
												<small>@schedule.Registration.Student.Ability</small>
											</div>
											<div>
												<small>@schedule.Registration.Student.Notes</small>
											</div>
										}
									</td>
								}
							}
							else if (schedule != null && schedule.Registration == null)
							{
								<td rowspan="1">
									<small>Available</small>
								</td>
							}
							else if (schedule == null)
							{
								<td rowspan="1">
									<small>Not scheduled</small>
								</td>
							}
						}
					</tr>
				}
			</tbody>
		</table>
	}
}


<script>
	$("#print-btn").click(function () {
		window.print();
	});
</script>
